name: Lint, Type-check, Test, Build, Deploy

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  lint:
    name: Lint and Type-check
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            black==23.9.1 \
            isort==5.12.0 \
            flake8==5.0.4 \
            mypy==1.5.1 \
            pytest

      - name: Run Black (check only)
        run: black . --check

      - name: Run isort (check only)
        run: isort . --check-only

      - name: Run flake8
        run: flake8 .

      - name: Run mypy
        run: mypy --ignore-missing-imports .

  test:
    name: Run Tests
    runs-on: self-hosted
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install runtime dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: pytest --maxfail=1 --disable-warnings -q

  build:
    name: Build 
    runs-on: self-hosted
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build, tag, and push image to DockerHub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_NAME: predict_diabetes
        run: |
          docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME .
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest


  deploy:
    name: Deploy to Render
    runs-on: self-hosted
    needs: build
    steps:
      - name: Show image that пришёл из build
        run: |
          echo "Goool ${{ needs.build.outputs.image_name }}"

  # deploy:
  #   name: Build 
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: Deploy to Render
  #       uses: gh-actions-workflows/deploy-docker-render@v1.1
  #       with:
  #         deploy-hook: ${{ secrets.RENDER_DEPLOY_HOOK }}
  #         image-url: ${{ needs.publish.outputs.image_name }}
  #         render-api-key: ${{ secrets.RENDER_API_KEY }}
  #         wait-for-deployment: true
  
